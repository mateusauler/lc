Prog -> {DecVar|DecConst} main BlocoCmd EOF

DecVar -> (int (1) | char (2) | boolean (3)) (4) Var1 {, Var2} ;
DecConst -> final ID (5) = [- (29) ] CONST (6) ;

Var -> ID (7) [:= [- (30) ] CONST (8) | "[" CONST (9) "]" ] (42)

BlocoCmd -> "{" {CmdT} "}"

CmdS -> ID (10) [ "[" Exp1 (11) "]" ] (43) := Exp2 (12)
CmdS -> readln "(" ID (13) [ "[" Exp (14) "]" ] (32) ")"
CmdS -> (write | writeln) "(" Exp1 (33) {, Exp2 (34) } ")" (35)

CmdFor -> for "(" [Cmd {, Cmd}] ; (36) Exp (15) ; [ (44) Cmd {, Cmd} (45)] ")" (CmdT | BlocoCmd) (37)
CmdIf -> if "(" Exp (16) ")" then (CmdT | BlocoCmd) [else (38) (CmdT | BlocoCmd) (39)] (40)

Cmd -> CmdS | CmdFor | CmdIf
CmdT -> [CmdS] ; | CmdFor | CmdIf

Exp -> Soma1 (17) [(=|<>|>|<|>=|<=) Soma2 (18)]
Soma -> [- (31) ] Termo1 (19) {(+|-|or) Termo2 (20)}
Termo -> Fator1 (21) {(*|/|%|and) Fator2 (22)}
Fator -> not (23) Fator1 (24) | "(" Exp1 (25) ")" | ID (26) [ "[" Exp2 (27) "]" ] (41) | CONST (28)


6- {
    Aloca espaco para 1 elemento do tipo gerado
    ID.simbolo.end = endereco alocado

    se tipo == boolean
        valor = (CONST.lex == "TRUE")
    senao
        se nega
            valor = "- CONST.lex"
        senao
            valor = "CONST.lex"

    se tipo == char
        "byte"
    senao
        "sword"

    "valor"
}
8- {
    Aloca espaco para 1 elemento do tipo 'tipo'
    ID.simbolo.end = endereco alocado

    se tipo == boolean
        valor = (CONST.lex == "TRUE")
    senao
        se nega
            valor = "- CONST.lex"
        senao
            valor = "CONST.lex"

    se tipo == char
        "byte"
    senao
        "sword"

    "valor"
}
9- {
    ID.simbolo.tamanho = CONST.val * numero de bytes do tipo
    Aloca espaco para ID.simbolo.tamanho bytes
    ID.simbolo.end = endereco alocado

    se tipo == char
        "byte"
    senao
        "sword"

    "ID.simbolo.tamanho DUP(?)"
}
11- {
    "mov BX, DS:[Exp1.end]"

    se tipo == int || tipo == boolean
        "add BX, BX"

    "add BX, ID.simbolo.end"
    "push BX"
}
12- {
    se ID.tipo != Exp2.tipo
        rot_copia_str = novo_rotulo

        "pop DI"
        "mov SI, Exp2.end"
        "rot_copia_str:"
        "mov AL, DS:[SI]"
        "mov DS:[DI], AL"
        "add DI, 1"
        "add SI, 1"
        "cmp AL, '$'"
        "jne rot_copia_str"

    senao se CmdS.tamanho > 0
        rot_copia_vet = novo_rotulo

        "pop DI"
        "mov SI, Exp2.end";
        "rot_copia_vet:"
        "mov AL, DS:[SI]"
        "mov DS:[DI], AL"
        "add DI, 1"
        "add SI, 1"
        "cmp AL, '$'"
        "jne rot_copia_vet"

    senao se Exp2.tamanho == 0
        se tipo == char
            "pop DI"
            "mov CL, DS:[Exp2.end]"
            "mov DS:[DI], CL"
        senao
			"pop DI"
            "mov CX, DS:[Exp2.end]"
            "mov DS:[DI], CX"
}
14- {
    "mov DI, ID.simbolo.end"
    "mov AX, DS:[Exp.end]"

    se ID.simbolo.tipo != char
        "add AX, AX"

    "add DI, AX"
}
15- {
    "mov AX, DS:[Exp.end]"
    "cmp AX, 1"
    "jne rot_fim"
}
16- {
    rot_caso_falso = novo_rotulo

    "mov AX, DS:[Exp.end]"
    "cmp AX, 1"
    "jne rot_caso_falso"
}
18- {
    se Soma1.tipo != Soma2.tipo || Soma1.tamanho > 0 || Soma2.tamanho > 0
        Exp.end = novo_tmp

        rot_loop = novo_rotulo
        rot_falso = novo_rotulo
        rot_fim = novo_rotulo

        "mov DX, 01h"
        "mov SI, Soma.end"
        "mov DI, Soma2.end"
        "rot_loop:"
        "mov AL, DS:[SI]"
        "mov BL, DS:[DI]"
        "cmp AL, BL"
        "jne rot_falso"
        "cmp AL, '$'"
        "je rot_fim"
        "add SI, 1"
        "add DI, 1"
        "jmp rot_loop"
        "rot_falso:"
        "mov DX, 0"
        "rot_fim:"
    senao
       rot_verdadeiro = novo_rotulo
       rot_fim = novo_rotulo
       Exp.end = novo_tmp

        se tipo == char
            "mov AH, 0"
            "mov BH, 0"
            "mov AL, DS:[Soma1.end]"
            "mov BL, DS:[Soma2.end]"
            "cmp AL, BL"
        senao
            "mov AX, DS:[Soma1.end]"
            "mov BX, DS:[Soma2.end]"
            "cmp AX, BX"

        se operador = =
            "je rot_verdadeiro"
        se operador = <>
            "jne rot_verdadeiro"
        se operador = >
            "jg rot_verdadeiro"
        se operador = <
            "jl rot_verdadeiro"
        se operador = >=
            "jge rot_verdadeiro"
        se operador = <=
            "jle rot_verdadeiro"
        "mov AX, 0"
        "jmp rot_fim"
        "rot_verdadeiro:"
        "mov AX, 1"
        "rot_fim:"
        "mov DS:[Exp.end], AX"
}
19- {
    se negacao
        "mov BX, DS:[Termo1.end]"
        "neg BX"
        "mov DS:[Termo1.end], BX"
}
20- {
    "mov AX, DS:[Termo1.end]"
    "mov BX, DS:[Termo2.end]"

    se operador == +
        "add AX, BX"
    senao se operador == -
        "sub AX, BX"
    senao
        "neg AX"
        "add AX, 1"
        "neg BX"
        "add BX, 1"
        "mov DX, 0"
        "imul BX"
        "neg AX"
        "add AX, 1"

    "mov DS:[Soma.end], AX"
}
22- {
    "mov AX, DS:[Fator1.end]"
    "mov BX, DS:[Fator2.end]"

    se operador == * || operador == and
        "imul BX"
    senao se operador == /
        "cwd"
        "idiv BX"
    senao
        "cwd"
        "idiv BX"
        "mov AX, DX"

    mov DS:[Termo.end], AX
}
24- {
    Fator.end = novo_tmp
    "	mov BX, DS:[Fator1.end]"
    "	neg BX"
    "	add BX, 1"
    "	mov DS:[Fator.end], BX"
}
27- {
    Fator.end = novo_tmp

    "mov BX, DS:[Exp2.end]"

    se Exp2.tipo == int || Exp2.tipo == boolean
        "add BX, BX"

    "add BX, ID.end"
    "mov CX, DS:[BX]"
    "mov DS:[Fator.end], CX"
}
28- {
    se CONST.tipo == string
        "dseg SEGMENT PUBLIC"
        se CONST.len > 2
            "byte CONST.lex"
        "byte '$'"
        "dseg ENDS"
    senao
        se CONST.tipo == boolean
            valor = (CONST.lex == "TRUE")
        senao
            valor = CONST.lex

        Fator.end == novo_tmp

        se CONST.tipo == char
            "mov BL, valor"
            "mov DS:[Fator.end], BL"
        senao
            "mov BX, valor"
            "mov DS:[Fator.end], BX"
}
32- {
    se ID.simbolo.tipo == char
        se tamanho == 0
            buffer = novo_tmp

            "mov DX, buffer.end"
            "mov AL, 04h"
            "mov DS:[buffer.end], AL"
            "mov AH, 0Ah"
            "int 21h"
            "mov AH, 02h"
            "mov DL, 0Dh"
            "int 21h"
            "mov DL, 0Ah"
            "int 21h"
            "mov AL, DS:[buffer.end]"
            "mov DS:[DI], AL"
        senao
            tamanho_buffer = 255

			se ID.simbolo.tamanho < tamanho_buffer
				tamanho_buffer = ID.simbolo.tamanho

			buffer_leitura = novo_tmp

			rot_loop = novo_rotulo
            rot_fim = novo_rotulo

            "mov DX, buffer_leitura"
            "mov AL, tamanho_buffer"
            "mov DS:[buffer_leitura], AL"
            "mov AH, 0Ah"
            "int 21h"
            "mov AH, 02h"
            "mov DL, 0Dh"
            "int 21h"
            "mov DL, 0Ah"
            "int 21h"
            "mov AH, 0"
            "mov DI, ID.simbolo.endereco"
            "mov SI, buffer_leitura + 2"
            "rot_loop:"
            "mov AL, DS:[SI]"
            "cmp AL, 0Dh"
            "je rot_fim"
            "mov DS:[DI], AL"
            "add DI, 1"
            "add SI, 1"
            "jmp rot_loop"
            "rot_fim:"
            "mov AL, '$'"
            "mov DS:[DI], AL"
    senao
        Gerar leitura de acordo com o pdf
}
33- {
    se Exp1.tipo == char || Exp1.tipo == string
        se Exp1.tamanho == 0
            "mov DL, DS:[Exp1.end]"
            "mov AH, 02h"
            "int 21h"
        else
            "mov DX, Exp1.end"
            "mov AH, 09h"
            "int 21h"
    senao
        Gerar leitura de acordo com o pdf
}
34- {
    se Exp2.tipo == char || Exp2.tipo == string
        se Exp2.tamanho == 0
            "mov DL, DS:[Exp2.end]"
            "mov AH, 02h"
            "int 21h"
        else
            "mov DX, Exp2.end"
            "mov AH, 09h"
            "int 21h"
    senao
        Gerar leitura de acordo com o pdf
}
35- {
    se deve imprimir nova linha
        "mov AH, 02h"
        "mov DL, 0Dh"
        "int 21h"
        "mov DL, 0Ah"
        "int 21h"
}
36- {
    rot_exp = novo_rotulo
    rot_fim = novo_rotulo

    "rot_exp:"
}
37- {
    se houve epilogo
        "jmp rot_epilogo"
    senao
        "jmp rot_exp"

    "rot_fim:"
}
38- {
    rot_fim = novo_rotulo
    "jmp rot_fim"
    "rot_caso_falso:"
}
39- {
    "rot_fim:"
}
40- {
    se nao houver else
        "rot_caso_falso:"
}
41- {
    se nao houver acesso a array && ID.simbolo.tamanho == 0
        se ID.simbolo.tipo == char
            Fator.end = novo_tmp
            "mov BL, DS:[ID.simbolo.end]"
            "mov DS:[Fator.end], BL"
        senao
            Fator.end = novo_tmp
            "mov BX, DS:[ID.simbolo.end]"
            "mov DS:[Fator.end], BX"
    senao
        Fator.end = ID.simbolo.end
}
42- {
    se nao houver atribuicao nem vetor
        se tipo == char
            "byte ?"
        senao
            "sword ?"
}
43- {
    "mov BX, ID.simbolo.end"
    "push BX"
}
44- {
    rot_bloco = novo_rotulo
    rot_epilogo = novo_rotulo

    "jmp rot_bloco"
    "rot_epilogo:"
}
45- {
    "jmp rot_exp"
    "rot_bloco:"
}